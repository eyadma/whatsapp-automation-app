#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üñºÔ∏è  WhatsApp Automation - Icon Verification');
console.log('==========================================\n');

// Check if we're in the mobile directory
const packageJsonPath = path.join(__dirname, 'package.json');
if (!fs.existsSync(packageJsonPath)) {
  console.error('‚ùå Error: package.json not found. Please run this script from the mobile directory.');
  process.exit(1);
}

console.log('üîç Checking Icon Configuration:');
console.log('===============================');

// Check app.json
const appJsonPath = path.join(__dirname, 'app.json');
if (fs.existsSync(appJsonPath)) {
  const appJson = JSON.parse(fs.readFileSync(appJsonPath, 'utf8'));
  console.log('‚úÖ app.json found');
  
  // Check main icon
  if (appJson.expo.icon) {
    console.log(`üì± Main Icon: ${appJson.expo.icon}`);
    const mainIconPath = path.join(__dirname, appJson.expo.icon);
    if (fs.existsSync(mainIconPath)) {
      console.log('‚úÖ Main icon file exists');
    } else {
      console.log('‚ùå Main icon file missing');
    }
  }
  
  // Check splash screen
  if (appJson.expo.splash && appJson.expo.splash.image) {
    console.log(`üì± Splash Screen: ${appJson.expo.splash.image}`);
    const splashPath = path.join(__dirname, appJson.expo.splash.image);
    if (fs.existsSync(splashPath)) {
      console.log('‚úÖ Splash screen file exists');
    } else {
      console.log('‚ùå Splash screen file missing');
    }
  }
  
  // Check iOS icon
  if (appJson.expo.ios && appJson.expo.ios.icon) {
    console.log(`üì± iOS Icon: ${appJson.expo.ios.icon}`);
    const iosIconPath = path.join(__dirname, appJson.expo.ios.icon);
    if (fs.existsSync(iosIconPath)) {
      console.log('‚úÖ iOS icon file exists');
    } else {
      console.log('‚ùå iOS icon file missing');
    }
  }
  
  // Check Android icon
  if (appJson.expo.android && appJson.expo.android.icon) {
    console.log(`üì± Android Icon: ${appJson.expo.android.icon}`);
    const androidIconPath = path.join(__dirname, appJson.expo.android.icon);
    if (fs.existsSync(androidIconPath)) {
      console.log('‚úÖ Android icon file exists');
    } else {
      console.log('‚ùå Android icon file missing');
    }
  }
  
  // Check Android adaptive icon
  if (appJson.expo.android && appJson.expo.android.adaptiveIcon) {
    console.log(`üì± Android Adaptive Icon: ${appJson.expo.android.adaptiveIcon.foregroundImage}`);
    const adaptiveIconPath = path.join(__dirname, appJson.expo.android.adaptiveIcon.foregroundImage);
    if (fs.existsSync(adaptiveIconPath)) {
      console.log('‚úÖ Android adaptive icon file exists');
    } else {
      console.log('‚ùå Android adaptive icon file missing');
    }
  }
  
  // Check web favicon
  if (appJson.expo.web && appJson.expo.web.favicon) {
    console.log(`üì± Web Favicon: ${appJson.expo.web.favicon}`);
    const faviconPath = path.join(__dirname, appJson.expo.web.favicon);
    if (fs.existsSync(faviconPath)) {
      console.log('‚úÖ Web favicon file exists');
    } else {
      console.log('‚ùå Web favicon file missing');
    }
  }
  
  // Check notification icon
  if (appJson.expo.notification && appJson.expo.notification.icon) {
    console.log(`üì± Notification Icon: ${appJson.expo.notification.icon}`);
    const notificationIconPath = path.join(__dirname, appJson.expo.notification.icon);
    if (fs.existsSync(notificationIconPath)) {
      console.log('‚úÖ Notification icon file exists');
    } else {
      console.log('‚ùå Notification icon file missing');
    }
  }
  
} else {
  console.log('‚ùå app.json not found');
}

console.log('\nüñºÔ∏è  Checking Assets Directory:');
console.log('=============================');

const assetsDir = path.join(__dirname, 'assets', 'images');
const requiredAssets = [
  'icon.png',
  'splash-icon.png', 
  'adaptive-icon.png',
  'favicon.png'
];

let allAssetsExist = true;

requiredAssets.forEach(asset => {
  const assetPath = path.join(assetsDir, asset);
  if (fs.existsSync(assetPath)) {
    const stats = fs.statSync(assetPath);
    const sizeKB = Math.round(stats.size / 1024);
    console.log(`‚úÖ ${asset} (${sizeKB} KB)`);
  } else {
    console.log(`‚ùå ${asset} missing`);
    allAssetsExist = false;
  }
});

console.log('\nüîç Checking for Conflicts:');
console.log('==========================');

// Check for conflicting icon files in root
const rootIconPath = path.join(__dirname, '..', 'icon.png');
if (fs.existsSync(rootIconPath)) {
  console.log('‚ö†Ô∏è  WARNING: Found conflicting icon.png in root directory');
  console.log('   This could cause confusion. Consider removing it.');
} else {
  console.log('‚úÖ No conflicting root icon.png found');
}

// Check Android native icons
const androidResDir = path.join(__dirname, 'android', 'app', 'src', 'main', 'res');
if (fs.existsSync(androidResDir)) {
  console.log('‚úÖ Android native icons directory exists');
  console.log('   (These are auto-generated by Expo and should be consistent)');
} else {
  console.log('‚ÑπÔ∏è  Android native icons directory not found (normal for development)');
}

console.log('\nüìä Summary:');
console.log('===========');

if (allAssetsExist) {
  console.log('‚úÖ All required icon assets are present');
  console.log('‚úÖ Icon configuration is properly set up');
  console.log('‚úÖ Ready for cross-platform deployment');
  
  console.log('\nüöÄ Next Steps:');
  console.log('==============');
  console.log('1. Run: npx expo prebuild --clean (to regenerate native icons)');
  console.log('2. Test on all platforms:');
  console.log('   ‚Ä¢ Web: npm run web');
  console.log('   ‚Ä¢ iOS: npx expo run:ios');
  console.log('   ‚Ä¢ Android: npx expo run:android');
  console.log('3. Build for production: npm run build:production');
  
} else {
  console.log('‚ùå Some icon assets are missing');
  console.log('   Please ensure all required icon files are in mobile/assets/images/');
  process.exit(1);
}

console.log('\nüéâ Icon verification complete!');
